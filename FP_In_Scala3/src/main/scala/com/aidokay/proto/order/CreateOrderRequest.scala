// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.aidokay.proto.order

@SerialVersionUID(0L)
final case class CreateOrderRequest(
    userId: _root_.scala.Long = 0L,
    item: _root_.scala.Seq[order.Item] = _root_.scala.Seq.empty,
    totalPrice: _root_.scala.Float = 0.0f,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CreateOrderRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = userId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      item.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = totalPrice
        if (__value != 0.0f) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = userId
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      item.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = totalPrice
        if (__v != 0.0f) {
          _output__.writeFloat(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withUserId(__v: _root_.scala.Long): CreateOrderRequest = copy(userId = __v)
    def clearItem = copy(item = _root_.scala.Seq.empty)
    def addItem(__vs: order.Item *): CreateOrderRequest = addAllItem(__vs)
    def addAllItem(__vs: Iterable[order.Item]): CreateOrderRequest = copy(item = item ++ __vs)
    def withItem(__v: _root_.scala.Seq[order.Item]): CreateOrderRequest = copy(item = __v)
    def withTotalPrice(__v: _root_.scala.Float): CreateOrderRequest = copy(totalPrice = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = userId
          if (__t != 0L) __t else null
        }
        case 2 => item
        case 3 => {
          val __t = totalPrice
          if (__t != 0.0f) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(userId)
        case 2 => _root_.scalapb.descriptors.PRepeated(item.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PFloat(totalPrice)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: order.CreateOrderRequest.type = order.CreateOrderRequest
    // @@protoc_insertion_point(GeneratedMessage[CreateOrderRequest])
}

object CreateOrderRequest extends scalapb.GeneratedMessageCompanion[order.CreateOrderRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[order.CreateOrderRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): order.CreateOrderRequest = {
    var __userId: _root_.scala.Long = 0L
    val __item: _root_.scala.collection.immutable.VectorBuilder[order.Item] = new _root_.scala.collection.immutable.VectorBuilder[order.Item]
    var __totalPrice: _root_.scala.Float = 0.0f
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __userId = _input__.readInt64()
        case 18 =>
          __item += _root_.scalapb.LiteParser.readMessage[order.Item](_input__)
        case 29 =>
          __totalPrice = _input__.readFloat()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    order.CreateOrderRequest(
        userId = __userId,
        item = __item.result(),
        totalPrice = __totalPrice,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[order.CreateOrderRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      order.CreateOrderRequest(
        userId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        item = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[order.Item]]).getOrElse(_root_.scala.Seq.empty),
        totalPrice = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = OrderProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = OrderProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = order.Item
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = order.CreateOrderRequest(
    userId = 0L,
    item = _root_.scala.Seq.empty,
    totalPrice = 0.0f
  )
  implicit class CreateOrderRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, order.CreateOrderRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, order.CreateOrderRequest](_l) {
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def item: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[order.Item]] = field(_.item)((c_, f_) => c_.copy(item = f_))
    def totalPrice: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.totalPrice)((c_, f_) => c_.copy(totalPrice = f_))
  }
  final val USER_ID_FIELD_NUMBER = 1
  final val ITEM_FIELD_NUMBER = 2
  final val TOTAL_PRICE_FIELD_NUMBER = 3
  def of(
    userId: _root_.scala.Long,
    item: _root_.scala.Seq[order.Item],
    totalPrice: _root_.scala.Float
  ): _root_.order.CreateOrderRequest = _root_.order.CreateOrderRequest(
    userId,
    item,
    totalPrice
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[CreateOrderRequest])
}
